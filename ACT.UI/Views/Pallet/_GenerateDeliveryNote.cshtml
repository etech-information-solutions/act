@model DeliveryNoteViewModel

@using ACT.UI.Models;
@using ACT.Core.Enums;

@{
    if (ViewBag.IncludeLayout == null)
    {
        Layout = null;
    }
    int lineCnt = 0;
    ViewBag.Title = "Generate Delivery Note";
}


@Html.Partial("_Notification")
@if (ViewBag.ContextualMode)
{
    <input type="hidden" id="context" name="context" value="1" />
}
else
{
    <input type="hidden" id="context" name="context" value="0" />
}

@using (Html.BeginForm("GenerateDeliveryNotePost", "Pallet", FormMethod.Post, new { @class = "custom-validate", @data_ajax_form = "1", @style = "width: auto;", Name = "generatedeliverynote", @Id = "generatedeliverynote" }))
{
    <div id="edit-item">

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Status)
        @Html.HiddenFor(model => model.DeliveryNoteLinesString)
        @Html.HiddenFor(model => model.CountNoteLines)
        @Html.HiddenFor(model => model.Reprint)
        @Html.HiddenFor(model => model.DeliveryEmail)
        @Html.HiddenFor(model => model.CustomerName)

        @Html.ValidationSummary(true)

        <div id="item-details" class="item-details" style="width: auto;">
            <div class="left" style="width: 50%; margin-right: 2%;">
                <div class="editor-label">
                    Order Date
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.OrderDate, new { @class = "date-picker", @style = "width: 87%;", @placeholder = "     /       /       " })
                    @Html.ValidationMessageFor(model => model.OrderDate)
                </div>

                <div class="editor-label ">
                    Order Number
                </div>

                <div class="editor-field">
                    @Html.TextBoxFor(model => model.OrderNumber, new { @class = "input", @placeholder = "Please Complete" })
                    @Html.ValidationMessageFor(model => model.OrderNumber)
                </div>

                <div class="editor-label ">
                    Delivery Note Number
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.InvoiceNumber, new { @class = "input", @placeholder = "Please Complete", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.InvoiceNumber)
                    <a id="generatednnumber" href="#" onclick="GetDeliveryNoteNumber();"><i class="fa fa-refresh"></i> Generate Number</a>
                </div>
            </div>

            <div class="left" style="width: 45%;">

                <div class="editor-label">
                    Cutomer Name
                </div>
                <div class="editor-field">
                    @*@if (ViewBag.ContextualMode)
                    {
                        @Html.DropDownList("ClientList")
                    }
                    else
                    {
                        @Html.DropDownList("ClientList", "All Clients")
                    }*@
                    @Html.DropDownListFor(model => model.ClientId,
                    new SelectList(ViewBag.ClientList, "Value", "Text"),
                    "Please Select",
                    new { @class = "form-control", @onchange = "ClientListChanged()" })
                </div>

                <div class="editor-label">
                    Customer Address
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.CustomerAddress, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.CustomerAddress)
                    @Html.TextBoxFor(model => model.CustomerAddress2, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Suburb/Area " })
                    @Html.ValidationMessageFor(model => model.CustomerAddress2)

                </div>

                <div class="editor-label">
                    Town/City
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.CustomerAddressTown, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.CustomerAddressTown)
                </div>

                <div class="editor-label">
                    Postal Code
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.CustomerPostalCode, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Postal Code" })
                    @Html.ValidationMessageFor(model => model.CustomerPostalCode)
                </div>
                <div class="editor-label">
                    Province
                </div>
                <div class="editor-field">
                    <select id="CustomerProvince" name="CustomerProvince" required="required" style="width: 100%;">
                        <option value="">-- select</option>
                    </select>
                </div>

            </div>

            <div class="clear" style="height: 10px;">&nbsp;</div>


            <div class="left" style="width: 48%; margin-right: 4%;">
                <h3>Shipping Address</h3>

                <div id="locationFieldShipping">
                    Type your address below:
                    <input id="autocomplete"
                           placeholder="Enter your address"
                           onFocus="geolocate()"
                           type="text" />
                </div>

                <div class="editor-label">
                    Customer Address
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.DeliveryAddress, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.DeliveryAddress)
                    @Html.TextBoxFor(model => model.DeliveryAddress2, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Suburb/Area " })
                    @Html.ValidationMessageFor(model => model.DeliveryAddress2)

                </div>

                <div class="editor-label">
                    Town/City
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.DeliveryAddressTown, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.DeliveryAddressTown)
                </div>

                <div class="editor-label">
                    Postal Code
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.DeliveryPostalCode, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Postal Code" })
                    @Html.ValidationMessageFor(model => model.DeliveryPostalCode)
                </div>
                <div class="editor-label">
                    Province
                </div>
                <div class="editor-field">
                    <select id="DeliveryProvince" name="DeliveryProvince" required="required" style="width: 100%;">
                        <option value="">-- select</option>
                    </select>
                </div>
            </div>

            <div class="left" style="width: 48%;">
                <h3>Invoice Address&nbsp;</h3><input type="checkbox" id="sameasshipping" name="sameasshipping" value="1" disabled="disabled" onclick="copyAddress()" /> Same as Shipping Address

                <div id="locationFieldInvoice">
                    Type your address below:
                    <input id="autocompleteInvoice"
                           placeholder="Enter your address"
                           onFocus="geolocate()"
                           type="text" />
                </div>

                <div class="editor-label">
                    Customer Address
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.BillingAddress, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.BillingAddress)
                    @Html.TextBoxFor(model => model.BillingAddress2, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Suburb/Area " })
                    @Html.ValidationMessageFor(model => model.BillingAddress2)

                </div>

                <div class="editor-label">
                    Town/City
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.BillingAddressTown, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                    @Html.ValidationMessageFor(model => model.BillingAddressTown)
                </div>

                <div class="editor-label">
                    Postal Code
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.BillingPostalCode, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Postal Code" })
                    @Html.ValidationMessageFor(model => model.BillingPostalCode)
                </div>
                <div class="editor-label">
                    Province
                </div>
                <div class="editor-field">
                    <select id="BillingProvince" name="BillingProvince" required="required" style="width: 100%;">
                        <option value="">-- select</option>
                    </select>
                </div>

            </div>

            <div class="clear" style="height: 10px;">&nbsp;</div>
            <a id="addlinerow" href="#" onclick="AddLineRow();"><i class="fa fa-plus"></i> Add</a>
            <table id="deliverynotelines-table" class="da-table datatable-numberpaging sort fixed-header table-hover" data-fixed-header-target="#groupsexcluded-table_wrapper" data-starting-point=".ap-tabs ul">
                <thead>
                    <tr>
                        <th style="width:20%;">
                            Product
                        </th>
                        <th style="width:40%;">
                            Description
                        </th>
                        <th style="width:10%;">
                            Ordered
                        </th>
                        <th style="width:10%;">
                            Delivered
                        </th>
                        <th style="width:10%;">
                            Outstanding
                        </th>
                        <th data-name="Actions" style="width:10%;">
                            Action
                        </th>
                    </tr>
                </thead>

                <tbody id="deliverynotelinesdata">
                    @if (Model.DeliveryNoteLines != null && Model.DeliveryNoteLines.Count() > 0)
                    {

                        //foreach (DeliveryNoteLineViewModel line in Model.DeliveryNoteLines.Where(s => s.Status == (Int32)Status.Active))
                        for (int i = 0; i < Model.DeliveryNoteLines.Count(); i++)
                        {
                            <tr id="deliverynotelinerow">
                                <td>
                                    @*@Html.TextBoxFor(model => Model.DeliveryNoteLines, new { @class = "input", @placeholder = "Please Complete" })*@
                                    @Html.TextBoxFor(model => Model.DeliveryNoteLines[i].Product, new { @class = "input", @placeholder = "Please Complete" })
                                    @Html.ValidationMessageFor(model => Model.DeliveryNoteLines[i].Product)
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => Model.DeliveryNoteLines[i].ProductDescription, new { @class = "input", @placeholder = "Please Complete" })
                                    @Html.ValidationMessageFor(model => Model.DeliveryNoteLines[i].ProductDescription)
                                    @*<input id="DeliveryNoteLines.ProductDescription" name="DeliveryNoteLines.ProductDescription" placeholder="Enter Product Description" type="text" value="" required="required" class="input" />*@
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => Model.DeliveryNoteLines[i].OrderQuantity, new { @class = "input", @placeholder = "Please Complete", type = "number", min = "-9999999", step = "1" })
                                    @Html.ValidationMessageFor(model => Model.DeliveryNoteLines[i].OrderQuantity)
                                    @*<input id="DeliveryNoteLines.OrderQuantity" name="DeliveryNoteLines.OrderQuantity" type="number" required="required" value="0" class="input" />*@
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => Model.DeliveryNoteLines[i].Delivered, new { @class = "input", @placeholder = "Please Complete", type = "number", min = "-9999999", step = "1" })
                                    @Html.ValidationMessageFor(model => Model.DeliveryNoteLines[i].Delivered)
                                    @*<input id="DeliveryNoteLines.Delivered" name="DeliveryNoteLines.Delivered" type="number" required="required" value="0" class="input" />*@
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => Model.DeliveryNoteLines[i].Outstanding, new { @class = "input", @placeholder = "Please Complete", type = "number", min = "-9999999", step = "1" })
                                    @Html.ValidationMessageFor(model => Model.DeliveryNoteLines[i].Outstanding)
                                    @*<input id="DeliveryNoteLines.Outstanding" name="DeliveryNoteLines.Outstanding" type="number" required="required" value="0" class="input" />*@
                                </td>
                                <td>
                                    <a id="saveline_@i" name="saveline_@i" onclick="SaveLine(@i)"><i class="fa fa-save"></i></a>
                                    <a id="editline_@i" name="saveline_@i" onclick="EditLine(@i)"><i class="fa fa-edit"></i></a>
                                    <a id="deleteline_@i" name="saveline_@i" onclick="DeleteLine(@i)"><i class="fa fa-delete"></i></a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>

            </table>


            <div class="clear" style="height: 10px;">&nbsp;</div>

            <div class="left" style="width: 48%; margin-right: 4%;">
                <p>
                    <input id="savedn-btn"  type="submit" value="Generate Delivery Note" disabled="disabled"/><!--onclick="SubmitDeliveryNote()"-->
                    <input id="reprintdn-btn"  type="button" onclick="ReprintDeliveryNote()" disabled="disabled" value="Reprint Delivery Note" />

                    @*<span style="padding: 0 5px;">/</span>

        <a data-refresh="1" data-target="#clientdata">Cancel</a>*@
                </p>
            </div>

            <div class="left" style="width: 48%;">
                <input type="email" id="DeliveryEmail" name="DeliveryEmail" placeholder="Enter Email" value="" />
                <input id="emaildn-btn" type="button" onclick="EmailDeliveryNote()" disabled="disabled" value="Email Delivery Note" />
            </div>


            <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 0;">&nbsp;</div>
        </div>

    </div>
}


<script>
    $(document).ready(function () {
        var client = $('#ClientId').val();
        var context = $("#context").val();
        $('#savedn-btn').attr("disabled", true);
        $('#reprintdn-btn').attr("disabled", true);
        $('#emaildn-btn').attr("disabled", true);
        if (context == "1") {
            GetClientAddress(client);
        }

        $('#save-btn').click(function (e) {
            var allok = CheckForm();

            if (!allok) {
                e.preventDefault();
            }
        });
        //$("#generatedeliverynote").submit(function (event) {
        //    alert("Handler for .submit() called.");
        //    event.preventDefault();
        //});


        //$('#save-btn').click(function () {
        //    //alert("clicked");
        //    debugger;
        //    var qtylines = $('#CountNoteLines').val();
        //    if (parseFloat(qtylines) > 0) {
        //        $("#generatedeliverynote").submit();
        //    } else {
        //        alert("Please Add Lines to the Delivery Note before attempting to save.");
        //    }

            //var form = $("#generatedeliverynote");
            //var dataString = form.serializeArray();
            //console.log(dataString);
            ////$.ajax({
            ////    type: 'POST',
            ////    url: "SaveDeliveryNoteLine",
            ////    data: data,
            ////    success: function (response) {
            ////        if (response == "True") {
            ////            alert('Delivery Note line Saved.');
            ////        } else {
            ////            alert('Delivery Note line could not be saved. Try again.');
            ////        }
            ////    }
            ////});
            //var data = {
            //    "id": "0"
            //};
            //$.ajax({
            //    type: "POST",
            //    url: "CreateDeliveryNote",
            //    data: data, // serializes the form's elements.
            //    //type: "POST",
            //    //dataType: 'json',
            //    //contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            //    success: function (data) {
            //        alert(data); // show response from the php script.
            //    }
            //});
            //   var form = $("#generatedeliverynote");
            ////   var url = "CreateDeliveryNote";
            //   var formData = form.serialize();
            //   $.post("CreateDeliveryNote", formData, function (data) {
            //       $("#msg").html(data);
            //   });
       // });

        //$("form").submit(function (event) {
        //    if ($("input").first().val() === "correct") {
        //        $("span").text("Validated...").show();
        //        return;
        //    }

        //    $("span").text("Not valid!").show().fadeOut(1000);
        //    event.preventDefault();
        //});

    });

    function GetDeliveryNoteNumber() {

        $.ajax({
            type: "GET",
            url: "GetDeliveryNoteNumber",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                $('#InvoiceNumber').val('DN'+result);
            },
            error: function (response) {
                $('#InvoiceNumber').val('Error');
            }
        });


    }

    function CheckForm() {
        var bReturn = false;
        var qtylines = $('#CountNoteLines').val();
        var invNumber = $('#InvoiceNumber').val();
        var orderNumber = $('#OrderNumber').val();
        if (parseFloat(qtylines) > 0 && invNumber != '' && orderNumber !='') {
            bReturn = true;
        }
        return bReturn;
    }

    function SubmitDeliveryNote() {
        //alert("Creating Delivery Note");
       // var form = $("#generatedeliverynote");
        var qtylines = $('#CountNoteLines').val();
        if (parseFloat(qtylines) > 0) {
           // debugger;
            $("#generatedeliverynote").submit();
        } else {
            alert("Please Add Lines to the Delivery Note before attempting to save.");
        }
       // CreateDeliveryNote();

    }
    function ReprintDeliveryNote() {
        alert("Creating Delivery Note");
        var form = $("#generatedeliverynote");

       // CreateDeliveryNote();

    }
    function EmailDeliveryNote() {
        alert("Creating Delivery Note");
        var form = $("#generatedeliverynote");

       // CreateDeliveryNote();
    }

    //function CreateDeliveryNote() {
    //    var form = $("#generatedeliverynote");

    //    $.ajax({
    //        type: "POST",
    //        url: "CreateDeliveryNote",
    //        data: form.serialize(), // serializes the form's elements.
    //        type: "POST",
    //        dataType: 'json',
    //        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
    //        success: function (data) {
    //            alert(data); // show response from the php script.
    //        }
    //    });
    //    alert("Creating Delivery Note");
    //}




    function AddLineRow() {
        var rowDiv = $("#deliverynotelines-table tbody");
        var id = $('#CountNoteLines').val();
        if (id == '' || id == undefined) {
            id = 0;
        }
        id = parseInt(id) + 1;
        //var tabledata = '<tr><td><input id="DeliveryNoteLines.Product" name="DeliveryNoteLines.Product" placeholder="Enter Product" required="required" type="text" value="" class="input" /></td>' +
        //    '<td><input id="DeliveryNoteLines.ProductDescription" name="DeliveryNoteLines.ProductDescription" placeholder="Enter Product Description" type="text" value="" required="required"  class="input" /></td>' +            
        //    '<td><input id="DeliveryNoteLines.OrderQuantity" name="DeliveryNoteLines.OrderQuantity" type="number" required="required" value="0" class="input" /></td>' +
        //    '<td><input id="DeliveryNoteLines.Delivered" name="DeliveryNoteLines.Delivered" type="number" required="required" value="0" class="input" /></td>' +
        //    '<td><input id="DeliveryNoteLines.Outstanding" name="DeliveryNoteLines.Outstanding" type="number" required="required" value="0" class="input" /></td>' +
        //    '<td><a id="saveline_0" name="saveline_0"><i class="fa fa-save"></i></a></td></tr> ';


        var tabledata = '<tr><td><input id="lineproduct_' + id +'" name="lineproduct_' + id +'" placeholder="Enter Product" required="required" type="text" value="" class="input" /></td>' +
            '<td><input id="lineproductdescr_'+id+'" name="lineproductdescr_'+id+'" placeholder="Enter Product Description" type="text" value="" required="required"  class="input" /></td>' +
            '<td><input id="lineordered_' + id + '" name="lineordered_' + id + '" type="number" value="0" required="required"  class="input" onchange="calcRemaining(' + id +')" /></td>' +
            '<td><input id="linedelivered_' + id + '" name="linedelivered_' + id + '" type="number" required="required" value="0" class="input" onchange="calcRemaining(' + id +')" /></td>' +
            '<td><input id="lineoutstanding_' + id + '" name="lineoutstanding_' + id + '" type="number" required="required" value="0" disabled="disabled"  class="input" /></td>' +
            '<td><a id="saveline_' + id + '" onclick="SaveLine(' + id + ')" name="saveline_' + id +'"><i class="fa fa-save"></i></a></td></tr> ';
        rowDiv.append(tabledata);
        

    }

    function SaveLineAJAX(id) {
        var deliverynoteid = $('#Id').val();
        if (deliverynoteid == 0) {
            alert("Delivery Note not created yet");
            CreateDeliveryNote();
            deliverynoteid = $('#Id').val();
        }
        var data = {
            "id": deliverynoteid, "delnoteid": deliverynoteid, "product": $('#lineproduct_' + id).val(), "productdesc": $('#lineproductdescr_' + id).val(), "qty": $('#lineordered_' + id).val(), "delqty": $('#linedelivered_' + id).val(), "outqty": $('#lineoutstanding_' + id).val()
        };
        if (deliverynoteid > 0) {
            $.ajax({
                type: 'POST',
                url: "SaveDeliveryNoteLine",
                data: data,
                success: function (response) {
                    if (response == "True") {
                        alert('Delivery Note line Saved.');
                    } else {
                        alert('Delivery Note line could not be saved. Try again.');
                    }
                }
            });
        } else {
            alert("Delivery Note not created yet. Please complete all fields first and try again");
        }
    }

    function calcRemaining(id) {
        var qty = $('#lineordered_' + id).val();
        var delqty = $('#linedelivered_' + id).val();
        var outqty = qty - delqty;
        $('#lineoutstanding_' + id).val(outqty);
    }

    function SaveLine(id) {
        var deliverynoteid = $('#Id').val();
        var product = $('#lineproduct_' + id).val();
        var productdesc = $('#lineproductdescr_' + id).val();
        var qty = $('#lineordered_' + id).val();
        var delqty = $('#linedelivered_' + id).val();
        var outqty = $('#lineoutstanding_' + id).val();
        var qtylines = parseFloat($('#CountNoteLines').val());

        if (product != '' && productdesc != '' && (parseFloat(qty)>0)) {
            var newstr = id + '|' + deliverynoteid +'|'+product + '|' + productdesc + '|' + qty + '|' + delqty + '|' + outqty + '|';
            var oldstr = $('#DeliveryNoteLinesString').val();

            if (oldstr == '') {
                $('#DeliveryNoteLinesString').val(newstr);
            } else {
                $('#DeliveryNoteLinesString').val(oldstr + "," + newstr);
            }

            alert("Line Saved");
            qtylines = qtylines + 1;
            $('#lineproduct_' + id).attr("disabled", true);
            $('#lineproductdescr_' + id).attr("disabled", true);
            $('#lineordered_' + id).attr("disabled", true);
            $('#linedelivered_' + id).attr("disabled", true);

            //open up buttons after first save
            $('#savedn-btn').removeAttr("disabled");
            //$('#reprint-btn').removeAttr("disabled");
            $('#emaildn-btn').removeAttr("disabled");

        } else {
            alert("Please complete all information to save a delivery note line");
        }

        $('#CountNoteLines').val(qtylines);


        //var selectedValues = [];
        //$("#ClientListGroupDDL :selected").each(function () {
        //    selectedValues.push($(this).val());
        //});
        //var clientlist = selectedValues.join();
        //$('#GroupClientList').val(clientlist);
    }

    function EditLine(id) { alert("Edit"); }

    function DeleteLine(id) { alert("Delete"); }

    function LoadLines(cId) {

    }

    function ClientListChanged() {
        // debugger;
        var client = $('#ClientId').val();
        //GetClientDetail(client);
        GetClientAddress(client);
        $('#CustomerName').val($("#ClientId option:selected").text());

    }

    function GetClientAddress(cId) {

        $.ajax({
            type: "GET",
            url: "GetObjectAddress",
            data: { objectId: cId, objectType: "Client" },
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {
                //debugger;
                $('#CustomerAddress').val(data.Addressline1);
                $('#CustomerAddress2').val(data.Addressline2);
                $('#CustomerAddressTown').val(data.Town);
                //$('#CustomerAddressProvince').val(data.CustomerAddress);
                $('#CustomerPostalCode').val(data.PostalCode);

                

                document.getElementById("CustomerProvince").options.length = 0;
                var opt = document.createElement("option");
                var val = "";
                var idx = 0;
                switch (data.Province) {
                    case 0:
                        idx = 0;
                        val = "Eastern Cape";
                        break;
                    case 1:
                        idx = 1;
                        val = "Free State";
                        break;
                    case 2:
                        val = "Gauteng";
                        idx = 2;
                        break;
                    case 3:
                        idx = 3;
                        val = "KwaZulu-Natal";
                        break;
                    case 4:
                        idx = 4;
                        val = "Limpopo";
                        break;
                    case 5:
                        idx = 5;
                        val = "Mpumalanga";
                        break;
                    case 6:
                        idx = 6;
                        val = "Northern Cape";
                        break;
                    case 7:
                        idx = 7;
                        val = "North West";
                        break;
                    case 8:
                        idx = 8;
                        val = "Western Cape";
                        break;
                    default:
                    // code block
                }

                // debugger;
                opt.text = val;
                opt.value = idx;
                document.getElementById("CustomerProvince").options.add(opt);

            },
            error: function (response) {
                alert('Error Retrieving Address Detail');
            }
        });

    }

    function copyAddress() {
        if ($("#DeliveryAddress").val() != "") {

            $("#BillingAddress").val($("#DeliveryAddress").val());
            $("#BillingAddress2").val($("#DeliveryAddress2").val());
            $("#BillingAddressTown").val($("#DeliveryAddressTown").val());
            var provId = $("#DeliveryProvince").val();
            var provText = $("#DeliveryProvince").text();
            document.getElementById("BillingProvince").options.length = 0;
            var opt = document.createElement("option");
            opt.text = provText;
            opt.value = provId;
            document.getElementById("BillingProvince").options.add(opt);
            $("#BillingPostalCode").val($("#DeliveryPostalCode").val());

        } else {
            alert("Please complete Shipping Address first");
            document.getElementById("sameasshipping").checked = false;
        }
    }
</script>

<script>
    //The Google Stuff
    var placeSearch, autocomplete, autocompleteInvoice;



    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        sublocality_level_1: 'long_name',
        sublocality_level_2: 'long_name',
        locality: 'long_name',
        administrative_area_level_2: 'long_name',
        administrative_area_level_1: 'long_name',
        //country: 'long_name',
        postal_code: 'short_name'
    };
    var componentFormFields = {
        street_number: 'DeliveryAddress',
        route: 'DeliveryAddress',
        locality: 'DeliveryAddressTown',
        sublocality_level_1: 'DeliveryAddress2',
        sublocality_level_2: 'DeliveryAddress2',
        administrative_area_level_2: 'DeliveryProvince',
        administrative_area_level_1: 'DeliveryProvince',
        //country: 'long_name',
        postal_code: 'DeliveryPostalCode'
    };

    var componentFormInvoice = {
        street_number: 'short_name',
        route: 'long_name',
        sublocality_level_1: 'long_name',
        sublocality_level_2: 'long_name',
        locality: 'long_name',
        administrative_area_level_2: 'long_name',
        administrative_area_level_1: 'long_name',
        //country: 'long_name',
        postal_code: 'short_name'
    };
    var componentFormFieldsInvoice = {
        street_number: 'BillingAddress',
        route: 'BillingAddress',
        locality: 'BillingAddressTown',
        sublocality_level_1: 'BillingAddress2',
        sublocality_level_2: 'BillingAddress2',
        administrative_area_level_2: 'BillingProvince',
        administrative_area_level_1: 'BillingProvince',
        //country: 'long_name',
        postal_code: 'BillingPostalCode'
    };

    function initAutocomplete() {
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });
        autocomplete.setFields(['address_component']);
        autocomplete.addListener('place_changed', fillInAddress);

        autocompleteInvoice = new google.maps.places.Autocomplete(
            document.getElementById('autocompleteInvoice'), { types: ['geocode'] });
        autocompleteInvoice.setFields(['address_component']);
        autocompleteInvoice.addListener('place_changed', fillInAddressInvoice);
    }

    function fillInAddress() {
        var place = autocomplete.getPlace();
        console.log(place);
        var fullAddress = "";

        for (var component in componentForm) {
            document.getElementById(componentFormFields[component]).value = '';
            document.getElementById(componentFormFields[component]).disabled = false;
        }
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                if (addressType == "route") {
                    var streetaddress = document.getElementById("DeliveryAddress");
                    document.getElementById("DeliveryAddress").value = streetaddress.value + " " + val;
                } else {
                    // debugger;
                    if (addressType == "administrative_area_level_1") {
                        var idx = -1;
                        switch (val) {
                            case "Eastern Cape":
                                idx = 0;
                                break;
                            case "Free State":
                                idx = 1;
                                break;
                            case "Gauteng":
                                idx = 2;
                                break;
                            case "KwaZulu-Natal":
                                idx = 3;
                                break;
                            case "Limpopo":
                                idx = 4;
                                break;
                            case "Mpumalanga":
                                idx = 5;
                                break;
                            case "Northern Cape":
                                idx = 67;
                                break;
                            case "North West":
                                idx = 7;
                                break;
                            case "Western Cape":
                                idx = 8;
                                break;
                            case "Western Cape":
                                idx = 8;
                                break;
                            default:
                            // code block
                        }
                        //setSelectedIndex(document.getElementById("Address.Province"), idx);
                        document.getElementById("DeliveryProvince").options.length = 0;
                        var opt = document.createElement("option");
                        opt.text = val;
                        opt.value = idx;
                        document.getElementById("DeliveryProvince").options.add(opt);
                    } else {
                        document.getElementById(componentFormFields[addressType]).value = val;
                    }
                    document.getElementById("sameasshipping").disabled = false;
                }
            }
            //change for 1st element
            if (i == 0) {
                fullAddress = place.address_components[i].long_name;
            } else {
                fullAddress = fullAddress + "," + place.address_components[i].long_name;
            }
            //for elements with Coords, call 2nd API here to locate coords with fulladdress

        }
        //alert(fullAddress);
    }

    function fillInAddressInvoice() {
        var place = autocomplete.getPlace();
        console.log(place);
        var fullAddress = "";

        for (var component in componentFormInvoice) {
            document.getElementById(componentFormFieldsInvoice[component]).value = '';
            document.getElementById(componentFormFieldsInvoice[component]).disabled = false;
        }
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentFormInvoice[addressType]) {
                var val = place.address_components[i][componentFormInvoice[addressType]];
                if (addressType == "route") {
                    var streetaddress = document.getElementById("BillingAddress");
                    document.getElementById("BillingAddress").value = streetaddress.value + " " + val;
                } else {
                    // debugger;
                    if (addressType == "administrative_area_level_1") {
                        var idx = -1;
                        switch (val) {
                            case "Eastern Cape":
                                idx = 0;
                                break;
                            case "Free State":
                                idx = 1;
                                break;
                            case "Gauteng":
                                idx = 2;
                                break;
                            case "KwaZulu-Natal":
                                idx = 3;
                                break;
                            case "Limpopo":
                                idx = 4;
                                break;
                            case "Mpumalanga":
                                idx = 5;
                                break;
                            case "Northern Cape":
                                idx = 67;
                                break;
                            case "North West":
                                idx = 7;
                                break;
                            case "Western Cape":
                                idx = 8;
                                break;
                            case "Western Cape":
                                idx = 8;
                                break;
                            default:
                            // code block
                        }
                        //setSelectedIndex(document.getElementById("Address.Province"), idx);
                        document.getElementById("BillingProvince").options.length = 0;
                        var opt = document.createElement("option");
                        opt.text = val;
                        opt.value = idx;
                        document.getElementById("BillingProvince").options.add(opt);
                    } else {
                        document.getElementById(componentFormFieldsInvoice[addressType]).value = val;
                    }
                }
            }
            //change for 1st element
            if (i == 0) {
                fullAddress = place.address_components[i].long_name;
            } else {
                fullAddress = fullAddress + "," + place.address_components[i].long_name;
            }
            //for elements with Coords, call 2nd API here to locate coords with fulladdress

        }
        //alert(fullAddress);
    }

    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
    function setSelectedIndex(s, i) {
        s.options[i - 1].selected = true;

        return;

    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAeQFyrVUFUjsQOK_RdtfAC57jMJkc_3Co&libraries=places&callback=initAutocomplete"
        async defer></script>