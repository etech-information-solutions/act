@model ChepLoadViewModel

@using ACT.Data.Models;
@using ACT.Core.Enums;
@using ACT.Core.Models;
@using ACT.UI.Models;
@using ACT.Core.Models.Custom;
@using ACT.Core.Services;

@{
    if (ViewBag.IncludeLayout == null)
    {
        Layout = null;
    }

    ViewBag.Title = "Edit Client";
}


@Html.Partial("_Notification")

@using (Html.BeginForm("EditChepLoad", "Pallet", FormMethod.Post, new { enctype = "multipart/form-data", @data_ajax_form = "1", @data_target = "#poolingagentdata", @class = "custom-validate", @style = "width: auto;", id = "editpoolingagentdata" }))
{
<div id="edit-item">

    <h2 class="uppercase" style="width: auto;">
        <img alt="" src="@Url.Content("~/images/edit.png")" />
        <span>Edit Pooling Agent Data</span>
    </h2>

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.Status)
    @Html.HiddenFor(model => model.PostingType) <!-- is the type or method it is entered into 1Email, 2 Imported,  3 Added -->
    @Html.HiddenFor(model => model.DocsList)

    <div class="left" style="width: 60%; margin-right: 2%;">
        <div class="left" style="width: 50%; margin-right: 2%;">
            <h3>Load Details</h3>
            <div class="editor-label ">
                @Html.LabelFor(model => model.AccountNumber)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.AccountNumber, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.AccountNumber)
            </div>

            <div class="editor-label ">
                @Html.LabelFor(model => model.ClientDescription)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ClientDescription, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.ClientDescription)
            </div>

            <div class="editor-label ">
                @Html.LabelFor(model => model.DeliveryNote)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.DeliveryNote, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.DeliveryNote)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.ReferenceNumber)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ReferenceNumber, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.ReferenceNumber)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.ReceiverNumber)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ReceiverNumber, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.ReceiverNumber)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.Equipment)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Equipment, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.Equipment)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.OriginalQuantity)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.OriginalQuantity, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.OriginalQuantity)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.NewQuantity)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.NewQuantity, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.NewQuantity)
            </div>


            <div class="editor-label ">
                @Html.LabelFor(model => model.DocketNumber)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.DocketNumber, new { @class = "input", @placeholder = "Please Complete" })
                @Html.ValidationMessageFor(model => model.DocketNumber)
            </div>
        </div>

        <div class="left" style="width: 45%;">

            <h3>Dates</h3>
            <div class="editor-label">
                @Html.LabelFor(model => model.LoadDate)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.LoadDate, new { @class = "date-picker", @style = "width: 87%;", @placeholder = "     /       /       " })
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.NotifyDate)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.NotifyDate, new { @class = "date-picker", @style = "width: 87%;", @placeholder = "     /       /       " })
                @Html.ValidationMessageFor(model => model.NotifyDate)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.EffectiveDate, new { @class = "date-picker", @style = "width: 87%;", @placeholder = "     /       /       " })
                @Html.ValidationMessageFor(model => model.EffectiveDate)
            </div>
        </div>
    </div>

    <div class="left" style="width: 33%; margin-right: 4%;">
        <div class="editor-label">
            Uploaded Documents
            <div class="editor-field" style="margin-bottom: 10px;" id="companydocslist" name="companydocslist">
                <div id="documentsdiv">
 
                </div>
                <input id="companyfile" name="companyfile" type="file" value="" data-val-file="1" class="input" />
                <span id="uploaded_file"></span>
            </div>
        </div>
    </div>

    <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 20px;">&nbsp;</div>

    <p>
        <input id="save-btn" type="submit" value="Update" />
        <span style="padding: 0 5px;">/</span> <a data-cancel="1" data-target="#edit-item" data-remove="tr.edit">Cancel</a>
    </p>
</div>

    <script>
        $(document).ready(function () {
            var cId = $("#Id").val();
            populateDocs(cId, "ChepLoad");

            $(document).on('change', '#companyfile', function () {
                var name = document.getElementById("companyfile").files[0].name;
                var form_data = new FormData();
                var ext = name.split('.').pop().toLowerCase();
                if (jQuery.inArray(ext, ['gif', 'png', 'jpg', 'jpeg', 'xls', 'pdf', 'xlsx', 'doc', 'docx']) == -1) {
                    alert("Invalid File");
                }
                var oFReader = new FileReader();
                oFReader.readAsDataURL(document.getElementById("companyfile").files[0]);
                var f = document.getElementById("companyfile").files[0];
                var fsize = f.size || f.fileSize;
                if (fsize > 2000000) {
                    alert("File Size is too large");
                }
                else {
                    form_data.append("file", document.getElementById('companyfile').files[0]);
                    form_data.append("clientId", $("#Id").val());
                    $.ajax({
                        url: "Upload?clientId="+cId,
                        method: "POST",
                        data: form_data,
                        contentType: false,
                        cache: false,
                        processData: false,
                        beforeSend: function () {
                            $('#uploaded_file').html("<label class='text-success'>File Uploading...</label>");
                        },
                        success: function (data) {
                            //$('#uploaded_file').html(data);
                            populateDocs(cId, "Client");
                            $('#uploaded_file').html("<label class='text-success'></label>");
                        }
                    });
                }
            });

        });
        function populateDocs(id, doctype) {

            $.ajax({

                url: '@Url.Action("ListFiles", "Client")',
                type: "GET",
                dataType: "html",
                data: { objId: id, objType:doctype },//this is as per your requirement
                success: function (data) {
                    $('#documentsdiv').html(data);
                },
            });
        }


        function ViewBudget() {
            $('.budgets').show();
        };

        function SaveBudget(id) {
            var cId = $("#Id").val();
            var data = {
                "Id": id, "ClientId": cId, "BudgetYear": $('#ClientBudget_' + id + '_BudgetYear').val(), "January": $('#ClientBudget_' + id + '_January').val(), "February": $('#ClientBudget_' + id + '_February').val(), "March": $('#ClientBudget_' + id + '_March').val(), "April": $('#ClientBudget_' + id + '_April').val(), "May": $('#ClientBudget_' + id + '_May').val(), "June": $('#ClientBudget_' + id + '_June').val(), "July": $('#ClientBudget_' + id + '_July').val(), "August": $('#ClientBudget_' + id + '_August').val(), "September": $('#ClientBudget_' + id + '_September').val(), "October": $('#ClientBudget_' + id + '_October').val(), "November": $('#ClientBudget_' + id + '_November').val(), "December": $('#ClientBudget_' + id + '_December').val()
            };
            $.ajax({
                type: 'POST',
                url: "SetClientBudget",
                data: data,//$(this).serialize(),
                success: function (response) {
                    if (response == "True") {
                        alert('Budget Saved.');
                    } else {
                        alert('Budget could not be saved. Try again.');
                    }
                }
            });


        }

        function AddRow() {
            var rowDiv = $("#clientBudget-table tbody");
            //var fieldcopy = '<input class="input" id="ClientBudget_0-[FIELDNAME]-" style="padding: 0 5px; width: 87%;" type="number" value="0">';
            var fieldvalue = "0";
            var savecopy = '<a id="savebudget" onclick="SaveBudget(' + fieldvalue + ')" name="savebudget"><i class="fa fa-save"></i></a>';
            var tabledata = '<tr id="budg-0-row" name="budg-0-row">';//<form id="budg-0-frm" name="budg-0-frm">
            tabledata += '<td><input class="input" id="ClientBudget_0_BudgetYear" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_BudgetTotal" onchange="updateBudgets(0, \'BudgetTotal\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_January"  onchange="updateBudgets(0, \'January\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_February"  onchange="updateBudgets(0, \'February\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_March"  onchange="updateBudgets(0, \'March\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_April"  onchange="updateBudgets(0, \'April\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_May"  onchange="updateBudgets(0, \'May\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_June"  onchange="updateBudgets(0, \'June\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_July"  onchange="updateBudgets(0, \'July\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_August"  onchange="updateBudgets(0, \'August\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_September"  onchange="updateBudgets(0, \'September\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_October"  onchange="updateBudgets(0, \'October\',' + fieldvalue + ')" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_November"  onchange="updateBudgets(0, \'November\',' + fieldvalue + ')" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_December"  onchange="updateBudgets(0, \'December\',' + fieldvalue + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td>' + savecopy.replace("[BUDGETID]", "0") + '</td>';
            tabledata += '</tr>';


            result = tabledata;

            rowDiv.append(result);

        }

        function LoadBudgets(id) {
            var rowDiv = $("#clientBudget-table tbody");
            rowDiv.html('');


            var savecopy = '<a id="savebudget" onclick="SaveBudget([BUDGETID])" name="savebudget"><i class="fa fa-save"></i></a>';
            $.ajax({
                type: "GET",
                url: "GetClientBudgets",
                data: { ClientId: id },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var count = Object.keys(data).length;
                    var result = "";
                    if (count > 0) {                        
                        $.each(data, function (id, budget) {
                            var total = (budget.January + budget.February + budget.March + budget.April + budget.May + budget.June + budget.July + budget.August + budget.September + budget.October + budget.November + budget.December);
                            var tabledata = '<tr id="budg-' + budget.Id + '-row" name="budg-' + budget.Id + '">';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_BudgetYear" disabled="disabled" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.BudgetYear + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_BudgetTotal" onchange="updateBudgets(' + budget.Id + ', \'BudgetTotal\',' + Math.ceil(total) + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + Math.ceil(total) + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_January" onchange="updateBudgets(' + budget.Id + ', \'January\',' + budget.January + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.January + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_February" onchange="updateBudgets(' + budget.Id + ', \'February\',' + budget.February + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.February + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_March" onchange="updateBudgets(' + budget.Id + ', \'March\',' + budget.March + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.March + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_April" onchange="updateBudgets(' + budget.Id + ', \'April\',' + budget.April + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.April + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_May" onchange="updateBudgets(' + budget.Id + ', \'May\',' + budget.May + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.May + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_June" onchange="updateBudgets(' + budget.Id + ', \'June\',' + budget.June + ')" style="padding: 0 5px; width:87%;" type="number" value="' + budget.June + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_July" onchange="updateBudgets(' + budget.Id + ', \'July\',' + budget.July + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.July + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_August" onchange="updateBudgets(' + budget.Id + ', \'August\',' + budget.August + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.August + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_September" onchange="updateBudgets(' + budget.Id + ', \'September\',' + budget.September + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.September + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_October" onchange="updateBudgets(' + budget.Id + ', \'October\',' + budget.October + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.October + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_November" onchange="updateBudgets(' + budget.Id + ', \'November\',' + budget.November + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.November + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_December" onchange="updateBudgets(' + budget.Id + ', \'December\',' + budget.December + ')" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.December + '"></td>';
                            tabledata += '<td>' + savecopy.replace("[BUDGETID]", budget.Id) + '</td>';
                            tabledata += '</tr>';
                            result += tabledata;
                        });

                    }

                    rowDiv.html(result);

                },
                error: function (response) {
                    alert('error');
                }
            });

        }

        function LinkToProducts(id) {
            $.ajax({
                type: 'POST',
                url: "SetClient",
                data: { "ClientId": id },
                success: function (response) {
                    window.location.href = 'Index#linkproducts';
                    location.reload();
                }
            });
        }

        function updateBudgets(elemtId, type, oldval) {
            var total = $("#ClientBudget_" + elemtId + "_BudgetTotal").val();    
            if (type == "BudgetTotal") {
                var totaleach = total / 12;
                totaleach = parseFloat(totaleach).toFixed(2);

                //$("#ClientBudget_" + elemtId + "_BudgetTotal").val(totaleach);
                $("#ClientBudget_" + elemtId + "_January").val(totaleach);
                $("#ClientBudget_" + elemtId + "_February").val(totaleach);
                $("#ClientBudget_" + elemtId + "_March").val(totaleach);
                $("#ClientBudget_" + elemtId + "_April").val(totaleach);
                $("#ClientBudget_" + elemtId + "_May").val(totaleach);
                $("#ClientBudget_" + elemtId + "_June").val(totaleach);
                $("#ClientBudget_" + elemtId + "_July").val(totaleach);
                $("#ClientBudget_" + elemtId + "_August").val(totaleach);
                $("#ClientBudget_" + elemtId + "_September").val(totaleach);
                $("#ClientBudget_" + elemtId + "_October").val(totaleach);
                $("#ClientBudget_" + elemtId + "_November").val(totaleach);
                $("#ClientBudget_" + elemtId + "_December").val(totaleach);
            } else {
                var newval = $("#ClientBudget_" + elemtId + "_"+type).val();
                total = (parseFloat(total).toFixed(2) - parseFloat(oldval).toFixed(2)) + parseFloat(newval).toFixed(2);
                $("#ClientBudget_" + elemtId + "_BudgetTotal").val(Math.ceil(total));
            }
        }

    </script>

    <script>
        //The Google Stuff
        var placeSearch, autocomplete;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            sublocality_level_1: 'long_name',
            sublocality_level_2: 'long_name',
            locality: 'long_name',
            administrative_area_level_2: 'long_name',
            administrative_area_level_1: 'long_name',
            //country: 'long_name',
            postal_code: 'short_name'
        };
        var componentFormFields = {
            street_number: 'Address_AddressLine1',
            route: 'Address_AddressLine1',
            locality: 'Address_Town',
            sublocality_level_1: 'Address_AddressLine2',
            sublocality_level_2: 'Address_AddressLine2',
            administrative_area_level_2: 'Address.Province',
            administrative_area_level_1: 'Address.Province',
            //country: 'long_name',
            postal_code: 'Address_PostCode'
        };


        function initAutocomplete() {
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });
            autocomplete.setFields(['address_component']);
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            var place = autocomplete.getPlace();
            console.log(place);
            var fullAddress = "";

            for (var component in componentForm) {                
                console.log(component);
                console.log(componentFormFields[component]);
                document.getElementById(componentFormFields[component]).value = '';
                document.getElementById(componentFormFields[component]).disabled = false;
            }
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    console.log(componentForm[addressType]);
                    console.log(componentFormFields[addressType]);
                    var val = place.address_components[i][componentForm[addressType]];
                    if (addressType == "route") {
                        var streetaddress = document.getElementById("Address_AddressLine1");
                        document.getElementById("Address_AddressLine1").value = streetaddress.value + " " + val;
                    } else {
                        //debugger;
                        if (addressType == "administrative_area_level_1") {
                            var idx = -1;
                            switch (val) {
                                case "Eastern Cape":
                                    idx = 0;
                                    break;
                                case "Free State":
                                    idx = 1;
                                    break;
                                case "Gauteng":
                                    idx = 2;
                                    break;
                                case "KwaZulu-Natal":
                                    idx = 3;
                                    break;
                                case "Limpopo":
                                    idx = 4;
                                    break;
                                case "Mpumalanga":
                                    idx = 5;
                                    break;
                                case "Northern Cape":
                                    idx = 67;
                                    break;
                                case "North West":
                                    idx = 7;
                                    break;
                                case "Western Cape":
                                    idx = 8;
                                    break;
                                case "Western Cape":
                                    idx = 8;
                                    break;
                                default:
                                // code block
                            }
                            //setSelectedIndex(document.getElementById("Address.Province"), idx);
                            document.getElementById("Address.Province").options.length = 0;
                            var opt = document.createElement("option");
                            opt.text = val;
                            opt.value = idx;
                            document.getElementById("Address.Province").options.add(opt);
                        } else {
                            document.getElementById(componentFormFields[addressType]).value = val;
                        }                     
                    }
                }
                //change for 1st element
                if (i == 0) {
                    fullAddress = place.address_components[i].long_name;
                } else {
                    fullAddress = fullAddress + "," + place.address_components[i].long_name;
                }
                //for elements with Coords, call 2nd API here to locate coords with fulladdress


            }
        }

        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
        function setSelectedIndex(s, i) {         
            s.options[i].selected = true;
            return;
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAeQFyrVUFUjsQOK_RdtfAC57jMJkc_3Co&libraries=places&callback=initAutocomplete"
            async defer></script>

}


