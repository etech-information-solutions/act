
@model PagingExtension

@using ACT.Core.Models;

@{
    ViewBag.ShowExport = true;
    ViewBag.ShowCustom = true;
    ViewBag.ViewName = "_OutstandingPallets";
}


@Html.Partial( "_Notification" )

@{
    Int32 count = Model.Start;
    List<OutstandingPalletsModel> items = ( List<OutstandingPalletsModel> ) Model.Items;


    //int? oldestYear = items.OrderBy( o => o.LoadDate.Value.Year )?.FirstOrDefault()?.LoadDate?.Year;

    //int yearDiff = DateTime.Now.Year - ( oldestYear ?? 0 );
}

@if ( Model == null || !items.Any() )
{
    <div class="notification message-warn" style="margin-bottom: 20px;">
        There are no Outstanding Pallets available matching your search criteria.
    </div>
}

<table id="outstandingpallets-table" class="da-table datatable-numberpaging sort fixed-header" data-fixed-header-target="#outstandingpallets-table_wrapper" data-starting-point=".ap-tabs ul">

    <thead>
        <tr>
            <th data-name="Count">
                #
            </th>
            <th data-name="ClientName">
                Client
            </th>
            <th data-name="Reason">
                Reason
            </th>
            <th data-name="0-30">
                0-30 Days
            </th>
            <th data-name="31-60">
                31-60 Days
            </th>
            <th data-name="61-90">
                61-90 Days
            </th>
            <th data-name="91-120">
                91-120 Days
            </th>
            <th data-name="121-183">
                121-183 Days
            </th>
            <th data-name="184-270">
                184-270 Days
            </th>
            <th data-name="271-365">
                271-365 Days
            </th>
            @*@if ( yearDiff > 0 )
                {
                    for ( int i = DateTime.Now.Year; i < yearDiff; i++ )
                    {
                        int y = DateTime.Now.AddYears( -i ).Year;

                        <th data-name="@y">
                            @y
                        </th>
                    }
                }*@
            <th data-name="GrandTotal">
                Grand Total
            </th>
        </tr>
    </thead>

    <tbody>
        @if ( Model != null && items != null && items.Count() > 0 )
        {
            foreach ( OutstandingPalletsModel item in items )
            {
                <tr>
                    <td width="1%" style="background-color: #012d71; color: #fff;">
                        @count
                    </td>
                    <td width="18%" style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.ClientLoad.ClientName
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    @*@if ( yearDiff > 0 )
                        {
                            for ( int i = DateTime.Now.Year; i < yearDiff; i++ )
                            {
                                int y = DateTime.Now.AddYears( -i ).Year;

                                <td style="border-left: 0 none; background-color: #012d71;"></td>
                            }
                        }*@

                    <td style="border-left: 0 none; background-color: #012d71;">
                    </td>
                </tr>

                foreach ( OutstandingReasonModel osr in item.OutstandingReasons )
                {
                    <tr>
                        <td width="1%">
                        </td>
                        <td>
                        </td>
                        <td width="20%" style="border-left: 0 none; background-color: #7cf0f0; color: #123cdf; font-weight: bold;">
                            @osr.Description
                        </td>
                        <td>
                            @osr.To30Days
                        </td>
                        <td>
                            @osr.To60Days
                        </td>
                        <td>
                            @osr.To90Days
                        </td>
                        <td>
                            @osr.To120Days
                        </td>
                        <td>
                            @osr.To183Days
                        </td>
                        <td>
                            @osr.To270Days
                        </td>
                        <td>
                            @osr.To365Days
                        </td>

                        @*@if ( yearDiff > 0 )
                            {
                                for ( int i = DateTime.Now.Year; i < yearDiff; i++ )
                                {
                                    int y = DateTime.Now.AddYears( -i ).Year;

                                    <td width="2%">
                                        @items.Where( c => c.OutstandingReasonId == item.OutstandingReasonId && c.ClientId == item.ClientId && ( item.LoadDate ?? item.CreatedOn ).Year == y ).Sum( s => s.ChepNewQuantity - s.NewQuantity )
                                    </td>
                                }
                            }*@

                        <td width="8%" style="border-left: 0 none; background-color: #7cf0f0; color: #123cdf; font-weight: bold;">
                            @osr.GrandTotal
                        </td>

                    </tr>
                }

                <tr>
                    <td width="1%" style="background-color: #012d71;">
                    </td>
                    <td width="18%" style="border-left: 0 none; background-color: #012d71;">
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        Grand Total
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To30Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To60Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To90Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To120Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To183Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To270Days
                    </td>
                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.To365Days
                    </td>

                    @*@if ( yearDiff > 0 )
                        {
                            for ( int i = DateTime.Now.Year; i < yearDiff; i++ )
                            {
                                int y = DateTime.Now.AddYears( -i ).Year;

                                <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                                    @items.Where( c => c.ClientId == item.ClientId && ( c.LoadDate ?? c.CreatedOn ).Year == y ).Sum( s => s.ChepNewQuantity - s.NewQuantity )
                                </td>
                            }
                        }*@

                    <td style="border-left: 0 none; background-color: #012d71; color: #fff; font-weight: bold;">
                        @item.GrandTotal.GrandTotal
                    </td>
                </tr>


                @*if ( clientCount + 1 == items.Count( c => c.ClientId == item.ClientId ) )
                    {
                        if ( count != items.Count )
                        {
                            <tr>
                            <td style="border-left: 0 none;">&nbsp;</td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>
                            <td style="border-left: 0 none;"></td>

                            @if ( yearDiff > 0 )
                                        {
                                            for ( int i = DateTime.Now.Year; i < yearDiff; i++ )
                                            {
                                                <td style="border-left: 0 none;"></td>
                                            }
                                        }

                                        <td style="border-left: 0 none;"></td>
                                    </tr>
                                }
                            }*@

                count++;
            }
        }
    </tbody>

</table>

@*@Html.Partial( "_OutstandingPalletsCustomSearch", new ACT.Core.Models.CustomSearchModel() )*@

@Html.Partial( "_Paging" )