@model SiteViewModel

@using ACT.Data.Models;
@using ACT.Core.Enums;
@using ACT.Core.Models;
@using ACT.UI.Models;
@using ACT.Core.Models.Custom;
@using ACT.Core.Services;

@{
    /**/

    if (ViewBag.IncludeLayout == null)
    {
        Layout = null;
    }

    ViewBag.Title = "Add Site";

    //List<Region> regionOptions = ViewBag.RegionOptions;
    //List<Region> regionOptions = Model.RegionOptions;
    //regionOptions = Model.RegionOptions.Where(r => r.PSPId == pspId).ToList();
}


@Html.Partial("_Notification")

@using (Html.BeginForm("AddSite", "Client", FormMethod.Post, new { enctype = "multipart/form-data", @data_ajax_form = "1", @data_target = "#managesites", @class = "custom-validate", @style = "width: auto;" }))
{
<div id="edit-item">

    <h2 class="uppercase" style="width: auto;">
        <img alt="" src="@Url.Content("~/images/edit.png")" />
        <span>Add Site</span>
    </h2>

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.SiteType)
    @Html.HiddenFor(model => model.SourceView)

    <div class="left" style="width: 45%; margin-right: 1%;">

        <div class="display-label">
            Name
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Name, new { @class = "input", @placeholder = "Enter Site Name" })
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="display-label">
            Description
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Description, new { @class = "input", @placeholder = "Enter Site Description" })
            @Html.ValidationMessageFor(model => model.Description)
        </div>
        <div class="display-label">
            @*Site Type*@
            Region
        </div>
        <div class="editor-field">
            @*@Html.DropDownListFor(model => model.RegionId, model => model.RegionOptions, region => region.Id, region => region.Name, true, new { @class = "chzn", @style = "width: 98%;" })*@
            @Html.DropDownList("RegionOptions", "Please Select")
            @*@Html.ValidationMessageFor(model => model.RegionId)*@
        </div>
        <div class="display-label">
            Account Code
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AccountCode, new { @class = "input", @placeholder = "Enter Account Code" })
            @Html.ValidationMessageFor(model => model.AccountCode)
            @*@Html.DisplayFor( model => model.UserRoles.FirstOrDefault().Role.Name )*@
        </div>

        <div class="display-label">
            Planning Point
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.PlanningPoint, new { @class = "input", @placeholder = "Enter Planning Point" })
            @Html.ValidationMessageFor(model => model.PlanningPoint)
        </div>

        <div class="display-label">
            Depot
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Depot, (new[] { new SelectListItem { Text = "No", Value = "No" }, new SelectListItem { Text = "Yes", Value = "Yes" } }), new { @class = "chzn", @style = "width: 98%;" })
        </div>
        <div class="display-label">
            Site Type
        </div>
        <div class="editor-field">
            <select id="SiteType" name="SiteType" class="chzn" required="required" style="width: 100%;">
                <option value="">-- select</option>
                @foreach (int p in Enum.GetValues(typeof(SiteType)))
                {
                    string text = ((SiteType)p).GetDisplayText();

                    <option value="@p">@text</option>
                }
            </select>
        </div>

        <div class="display-label">
            Chep SiteCode
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.SiteCodeChep, new { @class = "input", @placeholder = "EnterChep Site Code" })
            @Html.ValidationMessageFor(model => model.SiteCodeChep)
        </div>

    </div>

    <div class="left" style="width: 45%;">
        <h3>Contact Details</h3>
        <div class="display-label">
            Contact Number
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ContactNo, new { @class = "input", @placeholder = "Enter Contact Number" })
            @Html.ValidationMessageFor(model => model.ContactNo)
        </div>


        <div class="display-label">
            Contact Person
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ContactName, new { @class = "input", @placeholder = "Enter Contact Name" })
            @Html.ValidationMessageFor(model => model.ContactName)
        </div>
        <h3>Contact Details</h3>
        <div class="display-label">
            X Coordinates
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.XCord, new { @readonly = "readonly",@class = "input", @placeholder = "Enter X Coordinates" })
            @Html.ValidationMessageFor(model => model.XCord)
        </div>


        <div class="display-label">
            Y Coordinates
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.YCord, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Y Coordinates" })
            @Html.ValidationMessageFor(model => model.YCord)
        </div>

    </div>
    <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 20px;">&nbsp;</div>
        <div class="left" style="width: 90%; margin-right: 4%;">
            <div id="locationField">
                <input id="autocomplete"
                       placeholder="Enter your address"
                       onFocus="geolocate()"
                       type="text" />
            </div>
        </div>
        <div class="clear" style="height: 10px;">&nbsp;</div>
        <div class="left" style="width: 48%; margin-right: 4%;">

            <input id="Address.AddressType" name="Address.AddressType" type="hidden" value="@( ( int ) AddressType.Postal )" />

            <div class="editor-label">
                Street Address
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FullAddress.AddressLine1, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Street Address" })
                @Html.ValidationMessageFor(model => model.FullAddress.AddressLine1)
            </div>

            <div class="editor-label">
                Town/City
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FullAddress.Town, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Town/City" })
                @Html.ValidationMessageFor(model => model.FullAddress.Town)
            </div>

            <div class="editor-label">
                Postal Code
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FullAddress.PostCode, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Postal Code" })
                @Html.ValidationMessageFor(model => model.FullAddress.PostCode)
            </div>


        </div>

        <div class="left" style="width: 48%;">
            <div class="editor-label">
                Suburb/Area
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FullAddress.AddressLine2, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Suburb/Area" })
                @Html.ValidationMessageFor(model => model.FullAddress.AddressLine2)
            </div>

            <div class="editor-label">
                Province
            </div>
            <div class="editor-field">

                @*<select id="Address.Province" name="Address.Province" class="chzn" required="required" style="width: 100%;">
            <option value="">-- select</option>
            @foreach (int p in Enum.GetValues(typeof(Province)))
            {
                string text = ((Province)p).GetDisplayText();

                if (text.ToLower() == "all")
                {
                    continue;
                }

                <option value="@p">@text</option>
            }
        </select>*@
                @Html.TextBoxFor(model => model.FullAddress.Province, new { @readonly = "readonly",@class = "input", @placeholder = "Enter Province" })
                @Html.ValidationMessageFor(model => model.FullAddress.Province)
            </div>

        </div>


        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 20px;">&nbsp;</div>

        <p>
            <input id="save-btn" type="submit" value="Save" />

            <span style="padding: 0 5px;">/</span>

            <a data-refresh="1" data-target="#managesites">Cancel</a>
        </p>
        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 0;">&nbsp;</div>
    </div>
    <script>
        //The Page Stuff

    $(document).ready(function () {
        var sId = '@Model.Id';
        LoadBudgets(sId);

    });

    //function SaveBudget(id) {
    //    var data = $('#budg-' + id + ' :input').serialize();

    //    $.ajax({
    //        type: 'POST',
    //        url: "SetSiteBudget",
    //        data: data,
    //        //data : {'_token':csrfdata,'inputstr': strToSend},
    //        beforeSend: function () {
    //        },
    //        success: function (response) {
    //            if (response == "true") {
    //                alert('Budget Saved.');

    //            } else {
    //                alert('Email Could Not Be Sent. Try again.');
    //            }
    //        }
    //    });


    //}
    function SaveBudget(id) {
        var data = {
            "Id": id, "SiteId": "0", "BudgetYear": $('#SiteBudget_' + id + '_BudgetYear').val(), "January": $('#SiteBudget_' + id + '_January').val(), "February": $('#SiteBudget_' + id + '_February').val(), "March": $('#SiteBudget_' + id + '_March').val(), "April": $('#SiteBudget_' + id + '_April').val(), "May": $('#SiteBudget_' + id + '_May').val(), "June": $('#SiteBudget_' + id + '_June').val(), "July": $('#SiteBudget_' + id + '_July').val(), "August": $('#SiteBudget_' + id + '_August').val(), "September": $('#SiteBudget_' + id + '_September').val(), "October": $('#SiteBudget_' + id + '_October').val(), "November": $('#SiteBudget_' + id + '_November').val(), "December": $('#SiteBudget_' + id + '_December').val()
        };
        $.ajax({
            type: 'POST',
            url: "SetSiteBudget",
            data: data,//$(this).serialize(),
            success: function (response) {
                if (response == "True") {
                    alert('Budget Saved.');
                } else {
                    alert('Budget could not be saved. Try again.');
                }
            }
        });
        }
        function LoadBudgets(sId) {

        }

    function AddRow() {
        var rowDiv = $("#siteBudget-table tbody");
        //var fieldcopy = '<input class="input" id="SiteBudget_0-[FIELDNAME]-" style="padding: 0 5px; width: 87%;" type="number" value="0">';
        var fieldvalue = "0";
        var savecopy = '<a id="savebudget" onclick="SaveBudget(' + fieldvalue + ')" name="savebudget"><i class="fa fa-save"></i></a>';
        var tabledata = '<tr id="budg-0-row" name="budg-0-row">';//<form id="budg-0-frm" name="budg-0-frm">
        tabledata += '<td><input class="input" id="SiteBudget_0_BudgetYear" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_January" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_February" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_March" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_April" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_May" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_June" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_July" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_August" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_September" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_October" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_November" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td><input class="input" id="SiteBudget_0_December" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
        tabledata += '<td>' + savecopy.replace("[BUDGETID]", "0") + '</td>';
        tabledata += '</tr>';


        result = tabledata;

        rowDiv.append(result);

    }

    </script>

    <script>
        //The Google Stuff

        // This sample uses the Autocomplete widget to help the user select a
        // place, then it retrieves the address components associated with that
        // place, and then it populates the form fields with those details.
        // This sample requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script
        // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAHhY-pRI1pA4IfrX27Upxl-JOfL5IsvY8rem&libraries=places&callback=initAutocomplete"
            async defer></script>

    }
