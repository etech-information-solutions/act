@model ClientViewModel

@using ACT.Data.Models;
@using ACT.Core.Enums;
@using ACT.Core.Models;
@using ACT.UI.Models;
@using ACT.Core.Models.Custom;
@using ACT.Core.Services;

@{
    if (ViewBag.IncludeLayout == null)
    {
        Layout = null;
    }

    ViewBag.Title = "Edit Client";
}


@Html.Partial("_Notification")

@using (Html.BeginForm("EditClient", "Client", FormMethod.Post, new { enctype = "multipart/form-data", @data_ajax_form = "1", @data_target = "#clientlist", @class = "custom-validate", @style = "width: auto;", id = "editclient" }))
{
<div id="edit-item">

    <h2 class="uppercase" style="width: auto;">
        <img alt="" src="@Url.Content("~/images/edit.png")" />
        <span>Edit Client</span>
    </h2>

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Id)

    <div class="left" style="width: 60%; margin-right: 2%;">
        <div class="left" style="width: 50%; margin-right: 2%;">
            <h3>Client Details</h3>
            <div class="editor-label uppercase">
                Client Name
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.CompanyName, new { @class = "input", @placeholder = "Enter Company Name" })
                @Html.ValidationMessageFor(model => model.CompanyName)
            </div>
            <div class="editor-label uppercase">
                Company Registration Number
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.CompanyRegistrationNumber, new { @class = "input", @placeholder = "Enter Registration Number" })
                @Html.ValidationMessageFor(model => model.CompanyRegistrationNumber)
            </div>

            <h3>Contact Details</h3>
            <div class="editor-label uppercase">
                Name
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ContactPerson, new { @class = "input", @placeholder = "Enter Contact Name" })
                @Html.ValidationMessageFor(model => model.ContactPerson)
            </div>
            <div class="editor-label uppercase">
                Number
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.ContactNumber, new { @class = "input", @placeholder = "Enter Contact Number" })
                @Html.ValidationMessageFor(model => model.ContactNumber)
            </div>

            <h3>Administrator Details</h3>
            <div class="editor-label uppercase">
                Name
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FinancialPerson, new { @class = "input", @placeholder = "Enter Name" })
                @Html.ValidationMessageFor(model => model.FinancialPerson)
            </div>


        </div>

        <div class="left" style="width: 45%;">
            <h3>&nbsp;</h3>
            <div class="editor-label uppercase">
                Trading As
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.TradingAs, new { @class = "input", @placeholder = "Enter Trading As details" })
                @Html.ValidationMessageFor(model => model.TradingAs)
            </div>
            <div class="editor-label uppercase">
                VAT Number
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.VATNumber, new { @class = "input", @placeholder = "Enter VAT Number" })
                @Html.ValidationMessageFor(model => model.VATNumber)
            </div>


            <h3>&nbsp;</h3>

            <div class="editor-label uppercase">
                Email Address
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Email, new { @class = "input", @placeholder = "Enter Email Address" })
                @Html.ValidationMessageFor(model => model.Email)
            </div>

            <h3>&nbsp;</h3>
            <h3>&nbsp;</h3>
            <h3>&nbsp;</h3>
            <h3>&nbsp;</h3>
            <div class="editor-label uppercase">
                Email
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.AdminEmail, new { @class = "input", @placeholder = "Enter Email Address", type = "email" })
                @Html.ValidationMessageFor(model => model.AdminEmail)
            </div>
        </div>

        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 20px;">&nbsp;</div>
        <div class="left" style="width: 90%; margin-right: 4%;">
            <div id="locationField">
                <input id="autocomplete"
                       placeholder="Enter your address"
                       onFocus="geolocate()"
                       type="text" />
            </div>
        </div>
        <div class="clear" style="height: 10px;">&nbsp;</div>
        <div class="left" style="width: 48%; margin-right: 4%;">

            @Html.HiddenFor(model => model.Address.Id)
            @Html.HiddenFor(model => model.Address.AddressType)

            <div class="editor-label">
                Street Address
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Address.AddressLine1, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Street Address" })
                @Html.ValidationMessageFor(model => model.Address.AddressLine1)
            </div>

            <div class="editor-label">
                Town/City
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Address.Town, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Town/City" })
                @Html.ValidationMessageFor(model => model.Address.Town)
            </div>

            <div class="editor-label">
                Postal Code
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Address.PostCode, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Postal Code" })
                @Html.ValidationMessageFor(model => model.Address.PostCode)
            </div>

        </div>

        <div class="left" style="width: 48%;">

            <div class="editor-label">
                Suburb/Area
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Address.AddressLine2, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Address Line 2" })
                @Html.ValidationMessageFor(model => model.Address.AddressLine2)
            </div>

            <div class="editor-label">
                Province
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Address.Province, new { @readonly = "readonly", @class = "input", @placeholder = "Enter Province" })
                @Html.ValidationMessageFor(model => model.Address.Province)
                @*<select id="Address.Province" name="Address.Province" class="chzn" required="required" style="width: 87%;">
                        <option value="">-- select</option>
                        @foreach (int p in Enum.GetValues(typeof(Province)))
                        {
                            string provinceText = Model.Address.Province.ToString().ToLower().Replace(" ", "");
                            string text = ((Province)p).GetDisplayText();
                            string ltext = text.ToLower().Replace(" ","");
                            Province province = (Province)p;
                            //string prov = "";
                            if (text.ToLower() == "all")
                            {
                                continue;
                            }
                            else if (ltext == provinceText)
                            {
                                <option value="@p" selected="selected">@text</option>
                            }
                            else
                            {
                                <option value="@p" >@text</option>
                            }
                        }
                    </select>*@
            </div>
        </div>
    </div>

    <div class="left" style="width: 33%; margin-right: 4%;">

        <div class="editor-label uppercase">
            @Html.LabelFor(model => model.Logo)
        </div>
        <div class="editor-field">
            @if (@ViewBag.Logo != null)
            {
                foreach (Document l in @ViewBag.Logo)
                {
                    @Html.HiddenFor(model => model.Logo.Id)

                    <div style="border: 1px dashed #002e70; border-radius: 4px; padding: 4px; margin-bottom: 20px; width: 94%;">

                        @*<a target="_blank" href="@Url.Action("ViewDocument", "ClientLogo", new { @id = logo.Id })">
                                <img alt="download" src="@Url.Content("~/Images/download.png")" style="margin-bottom: 2px;" />

                                logo.Name (logo.Extension)
                            </a>*@
                        <img alt="logo" src="@(String.Format("{0}/{1}", Url.Content("~/Uploads/Documents"), l.Location))" style="width:80px;margin-bottom: 2px;" />
                    </div>

                }
            }
            <input id="Logo.File" name="Logo.File" type="file" value="" data-val-file="1" class="input" />
            <input id="Logo.Name" name="Logo.Name" type="hidden" value="Company File" />
            <input id="Logo.Description" name="Logo.Description" class="input" type="hidden" value="Company Logo" />
        </div>
        <div class="editor-label uppercase">
            Uploaded Documents
            <div class="editor-field" style="margin-bottom: 10px;" id="companydocslist" name="companydocslist">
                <div id="documentsdiv">
                    @*@if (Model.CompanyFile != null && Model.CompanyFile.Count() > 0)
                        {
                            foreach (Document companyFile in Model.CompanyFile.Where(s => s.Status == (Int32)Status.Active))
                            {
                                @Html.HiddenFor(model => companyFile.Id)

                                <div style="border: 1px dashed #002e70; border-radius: 4px; padding: 4px; margin-bottom: 20px; width: 94%;">

                                    <a target="_blank" href="@Url.Action("ViewDocument", "Client", new { @id = companyFile.Id })">
                                        <img alt="download" src="@Url.Content("~/Images/download.png")" style="margin-bottom: 2px;" />

                                        companyFile.Name (companyFile.Extension)
                                    </a>

                                </div>

                            }
                        }*@
                </div>
                <input id="companyfile" name="companyfile" type="file" value="" data-val-file="1" class="input" />
                <span id="uploaded_file"></span>
                @*<input id="NewCompanyFile.File" name="NewCompanyFile.File" type="file" value="" data-val-file="1" class="input" />
                    <input id="NewCompanyFile.Name" name="NewCompanyFile.Name" type="hidden" value="Company File" />
                    <input id="NewCompanyFile.Description" name="NewCompanyFile.Description" class="input" type="hidden" value="Company File" />*@
                @*@Html.ValidationMessageFor(model => companyFile.RegistrationFile)*@

            </div>
        </div>
    </div>

    <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 10px; height: 20px;">&nbsp;</div>

    @*<p>
            <strong class="uppercase">KPI</strong>
        </p>
        <div class="left" style="width: 40%; margin-right: 4%;">
            <div class="editor-label uppercase">
                Outstanding
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.KPIOutstanding, new { @class = "input", @placeholder = "Enter Outstanding KPI" })
                @Html.ValidationMessageFor(model => model.KPIOutstanding)

            </div>

            <div class="editor-label uppercase">
                Disputes
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.KPIDisputes, new { @class = "input", @placeholder = "Enter KPI Disputes" })
                @Html.ValidationMessageFor(model => model.KPIDisputes)
            </div>

        </div>

        <div class="left" style="width: 40%; margin-right: 4%;">
            <div class="editor-label uppercase">
                Days Outstanding
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.KPIDaysOutstanding, new { @class = "input", @placeholder = "Enter KPI Days Outstanding" })
                @Html.ValidationMessageFor(model => model.KPIDaysOutstanding)
            </div>

            <div class="editor-label uppercase">
                Days to Resolve
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.KPIDaysToResolve, new { @class = "input", @placeholder = "Enter KPI Days to Resolve" })
                @Html.ValidationMessageFor(model => model.KPIDaysToResolve)
            </div>

        </div>
        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 20px;">&nbsp;</div>*@
    <div class="budgets">

        <p>
            <strong class="uppercase">Client Budget</strong>
        </p>

        <div class="editor-label" style="margin-bottom: 10px;">
            <a id="addrow" href="#" onclick="AddRow();"><i class="fa fa-plus"></i> Add New</a>
            @*@Html.LabelFor(model => Model.ClientBudget)&nbsp;@Html.ActionLink("Add", "AddBudget", new { }, new { @class = "add", @rel = "tipsyS", @title = "Add a new site?", @data_edit = "1", @data_id = 0, @data_target = "#clientlist" })*@
        </div>

        <div class="editor-field">


            <table id="clientBudget-table" class="da-table" style="border-bottom: 0;">

                <thead>
                    <tr>
                        <th style="width: 6%;">Year</th>
                        <th style="width: 7%;">Total</th>
                        <th style="width: 7%;">Jan</th>
                        <th style="width: 7%;">Feb</th>
                        <th style="width: 7%;">Mar</th>
                        <th style="width: 7%;">Apr</th>
                        <th style="width: 7%;">May</th>
                        <th style="width: 7%;">Jun</th>
                        <th style="width: 7%;">Jul</th>
                        <th style="width: 7%;">Aug</th>
                        <th style="width: 7%;">Sep</th>
                        <th style="width: 7%;">Oct</th>
                        <th style="width: 7%;">Nov</th>
                        <th style="width: 7%;">Dec</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody></tbody>

            </table>
            @*<a id="savebudget" onclick="SaveBudget()" name="savebudget"><i class="fa fa-save"></i>Save Budget</a>*@
        </div>
        <br />
        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 20px; height: 0;">&nbsp;</div>
    </div>
    
    <p>
        <input id="save-btn" type="submit" value="Update" />
        <span style="padding: 0 5px;">/</span> <a data-cancel="1" data-target="#edit-item" data-remove="tr.edit">Cancel</a>
    </p>

    @if (ViewBag.IncludeLayout == null)
    {
    <p>
        @*@Html.ActionLink("Edit", "EditClient", new { id = Model.Id }, new { @class = "edit", @data_edit = "1", @data_id = Model.Id, @data_target = "#tr-" + Model.Id + "-item" })*@
        <a id="viewbudget" href="#" onclick="ViewBudget();"><i class="fa fa-plus"></i> View Budget</a>
        <a href="#" onclick="LinkToProducts('@Model.Id')"><i class="fa fa-link"></i>Link Products</a>
        @*@Html.ActionLink("Link Products to Client", "LinkProducts", new { id = Model.Id }, new { @class = "edit", @data_edit = "1", @data_id = Model.Id, @data_target = "#tr-Model.Id-item" })*@
    </p>
    }

</div>

    <script>
        $(document).ready(function () {
            var cId = $("#Id").val();
            LoadBudgets(cId);
            $(".budgets").hide();
            populateDocs(cId, "client");

            $(document).on('change', '#companyfile', function () {
                debugger;
                var name = document.getElementById("companyfile").files[0].name;
                var form_data = new FormData();
                var ext = name.split('.').pop().toLowerCase();
                if (jQuery.inArray(ext, ['gif', 'png', 'jpg', 'jpeg', 'xls', 'pdf', 'xlsx', 'doc', 'docx']) == -1) {
                    alert("Invalid File");
                }
                var oFReader = new FileReader();
                oFReader.readAsDataURL(document.getElementById("companyfile").files[0]);
                var f = document.getElementById("companyfile").files[0];
                var fsize = f.size || f.fileSize;
                if (fsize > 2000000) {
                    alert("File Size is too large");
                }
                else {
                    form_data.append("file", document.getElementById('companyfile').files[0]);
                    form_data.append("clientId", $("#Id").val());
                    $.ajax({
                        url: "Upload?clientId="+cId,
                        method: "POST",
                        data: form_data,
                        contentType: false,
                        cache: false,
                        processData: false,
                        beforeSend: function () {
                            $('#uploaded_file').html("<label class='text-success'>File Uploading...</label>");
                        },
                        success: function (data) {
                            //$('#uploaded_file').html(data);
                            populateDocs(cId, "client");
                            $('#uploaded_file').html("<label class='text-success'></label>");
                        }
                    });
                }
            });

        });
        function populateDocs(id, doctype) {

            $.ajax({

                url: '@Url.Action("CompanyFiles", "Client")',
                type: "GET",
                dataType: "html",
                data: { objId: id, objType:doctype },//this is as per your requirement
                success: function (data) {
                    $('#documentsdiv').html(data);
                },
            });
        }


        function ViewBudget() {
            $('.budgets').show();
        };

        function SaveBudget(id) {
            var cId = $("#Id").val();
            var data = {
                "Id": id, "ClientId": cId, "BudgetYear": $('#ClientBudget_' + id + '_BudgetYear').val(), "January": $('#ClientBudget_' + id + '_January').val(), "February": $('#ClientBudget_' + id + '_February').val(), "March": $('#ClientBudget_' + id + '_March').val(), "April": $('#ClientBudget_' + id + '_April').val(), "May": $('#ClientBudget_' + id + '_May').val(), "June": $('#ClientBudget_' + id + '_June').val(), "July": $('#ClientBudget_' + id + '_July').val(), "August": $('#ClientBudget_' + id + '_August').val(), "September": $('#ClientBudget_' + id + '_September').val(), "October": $('#ClientBudget_' + id + '_October').val(), "November": $('#ClientBudget_' + id + '_November').val(), "December": $('#ClientBudget_' + id + '_December').val()
            };
            $.ajax({
                type: 'POST',
                url: "SetClientBudget",
                data: data,//$(this).serialize(),
                success: function (response) {
                    if (response == "True") {
                        alert('Budget Saved.');
                    } else {
                        alert('Budget could not be saved. Try again.');
                    }
                }
            });


        }

        function AddRow() {
            var rowDiv = $("#clientBudget-table tbody");
            //var fieldcopy = '<input class="input" id="ClientBudget_0-[FIELDNAME]-" style="padding: 0 5px; width: 87%;" type="number" value="0">';
            var fieldvalue = "0";
            var savecopy = '<a id="savebudget" onclick="SaveBudget(' + fieldvalue + ')" name="savebudget"><i class="fa fa-save"></i></a>';
            var tabledata = '<tr id="budg-0-row" name="budg-0-row">';//<form id="budg-0-frm" name="budg-0-frm">
            tabledata += '<td><input class="input" id="ClientBudget_0_BudgetYear" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_total" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_January" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_February" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_March" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_April" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_May" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_June" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_July" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_August" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_September" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_October" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_November" style="padding: 0 5px; width:87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td><input class="input" id="ClientBudget_0_December" style="padding: 0 5px; width: 87%;" type="number" value="' + fieldvalue + '"></td>';
            tabledata += '<td>' + savecopy.replace("[BUDGETID]", "0") + '</td>';
            tabledata += '</tr>';


            result = tabledata;

            rowDiv.append(result);

        }

        function LoadBudgets(id) {
            var rowDiv = $("#clientBudget-table tbody");
            rowDiv.html('');


            var savecopy = '<a id="savebudget" onclick="SaveBudget([BUDGETID])" name="savebudget"><i class="fa fa-save"></i></a>';
            $.ajax({
                type: "GET",
                url: "GetClientBudgets",
                data: { ClientId: id },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var count = Object.keys(data).length;
                    var result = "";
                    if (count > 0) {
                        //var fieldcopy = '<input class="input" id="ClientBudget_[FIELDNAME]-[FIELDVALUE]" style="padding: 0 5px; width: 87%;" type="number" value="[FIELDVALUE]">';
                        $.each(data, function (id, budget) {
                            var total = (budget.January + budget.February + budget.March + budget.April + budget.May + budget.June + budget.July + budget.August + budget.September + budget.October + budget.November + budget.December);
                            var tabledata = '<tr id="budg-' + budget.Id + '-row" name="budg-' + budget.Id + '">';//<form id="budg-' + budget.Id + '-frm" name="budg-' + budget.Id + '-frm" >
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_BudgetYear" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.BudgetYear + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_BudgetYear" style="padding: 0 5px; width: 87%;" type="number" value="' + total + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_January" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.January + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_February" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.February + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_March" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.March + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_April" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.April + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_May" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.May + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_June" style="padding: 0 5px; width:87%;" type="number" value="' + budget.June + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_July" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.July + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_August" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.August + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_September" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.September + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_October" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.October + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_November" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.November + '"></td>';
                            tabledata += '<td><input class="input" id="ClientBudget_' + budget.Id + '_December" style="padding: 0 5px; width: 87%;" type="number" value="' + budget.December + '"></td>';
                            //tabledata += '<td>' + fieldcopy.replace("[FIELDNAME]", "December").replace("[FIELDVALUE]", //budget.December) + '</td>';
                            tabledata += '<td>' + savecopy.replace("[BUDGETID]", budget.Id) + '</td>';
                            tabledata += '</tr>';
                            result += tabledata;
                        });

                    }

                    rowDiv.html(result);

                },
                error: function (response) {
                    alert('error');
                }
            });

        }

        function LinkToProducts(id) {
            $.ajax({
                type: 'POST',
                url: "SetClient",
                data: { "ClientId": id },
                success: function (response) {
                    window.location.href = 'Index#linkproducts';
                    location.reload();
                }
            });


        }

    </script>

    <script>
        //The Google Stuff

        // This sample uses the Autocomplete widget to help the user select a
        // place, then it retrieves the address components associated with that
        // place, and then it populates the form fields with those details.
        // This sample requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script
        // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var placeSearch, autocomplete;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAHhY-pRI1pA4IfrX27Upxl-JOfL5IsvY8rem&libraries=places&callback=initAutocomplete"
            async defer></script>

}


