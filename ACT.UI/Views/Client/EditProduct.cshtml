@model ProductViewModel

@using ACT.UI.Models;
@using ACT.Core.Enums;

@{
    if ( ViewBag.IncludeLayout == null )
    {
        Layout = null;
    }

    ViewBag.Title = "Edit";
}


@Html.Partial( "_Notification" )

@using ( Html.BeginForm( "EditProduct", "Client", FormMethod.Post, new { enctype = "multipart/form-data", @data_ajax_form = "1", @data_target = "#products", @class = "custom-validate", @style = "width: auto;" } ) )
{
<div id="edit-item">

    <h2 class="uppercase" style="width: auto;">
        <img alt="" src="@Url.Content( "~/images/edit.png" )" />
        <span>Edit Product</span>
    </h2>

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.Status)

    <div id="item-details" class="item-details" style="width: auto;">

        <div class="left" style="width: 48%; margin-right: 4%;">

            <div class="edit-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="edit-field">
                @Html.TextBoxFor(model => model.Name, new { @placeholder = "Enter Product Name" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="edit-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="edit-field">
                @Html.TextAreaFor(model => model.Description, new { @style = "width: 93%;", @placeholder = "Enter Product Description" })
                @Html.ValidationMessageFor(model => model.Description)
            </div>

            <div class="editor-label uppercase">
                @Html.LabelFor(model => model.File)
            </div>

            <div class="editor-field" style="margin-bottom: 10px;">

                @if (Model.File != null && Model.File.Id > 0)
                {
                    @Html.HiddenFor(model => model.File.Id)

                    <div style="border: 1px dashed #002e70; border-radius: 4px; padding: 4px; margin-bottom: 20px; width: 94%;">

                        <a target="_blank" href="@Url.Action( "ViewDocument", "Administration", new { @id = Model.File.Id } )">
                            <img alt="download" src="@Url.Content( "~/Images/download.png" )" style="margin-bottom: 2px;" />

                            @Model.File.Name (@Model.File.Extension)
                        </a>

                    </div>
                }

                <input id="File.File" name="File.File" type="file" value="" data-val-file="1" class="input" />
                <input id="File.Name" name="File.Name" type="hidden" value="Product/Service Documentation" />
                <input id="File.Description" name="File.Description" class="input" type="hidden" value="Product/Service Documentation" />

                @Html.ValidationMessageFor(model => model.File)

            </div>

            <div class="edit-label">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="edit-field">
                @Html.EnumDropDownFor(model => model.Status, false, new { @class = "chzn", @style = "width: 98%;" })
                @Html.ValidationMessageFor(model => model.Status)
            </div>

        </div>

        <div class="left grouped-area" style="width: 44%;">

            <p>
                <strong style="color: #002e70; text-transform: uppercase;">Product Price Options</strong>
            </p>

            @if (Model.ProductPrices.NullableAny())
            {
                int i = 0;

                <ul>
                    @foreach (ProductPriceViewModel p in Model.ProductPrices)
                    {
                        <li style="border-bottom: 1px dashed #ddd; margin-bottom: 20px; padding-bottom: 4px;">

                            <input name="ProductPrices[@i].Id" value="@p.Id" type="hidden" />
                            <input name="ProductPrices[@i].ProductId" value="@p.ProductId" type="hidden" />

                            <div class="edit-label">
                                <label for="ProductPrices_@p.Type.GetIntValue()-Type">Option</label>
                            </div>
                            <div class="edit-field">

                                <select id="ProductPrices_@p.Type.GetIntValue()-Type" name="ProductPrices[@i].Type" class="chzn" style="width: 98%;">

                                    @foreach (int t in Enum.GetValues(typeof(ProductPriceType)))
                                    {
                                        ProductPriceType type = (ProductPriceType)t;

                                        string sel = type == p.Type ? "selected=selected" : "";

                                        <option value="@t" @sel>@type.GetDisplayText()</option>
                                    }

                                </select>

                                <span class="field-validation-valid" data-valmsg-for="ProductPrices_@p.Type.GetIntValue()-Type" data-valmsg-replace="true"></span>
                            </div>

                            <div class="edit-label">
                                <label for="ProductPrices_@p.Type.GetIntValue()-Rate">Rate</label>
                            </div>
                            <div class="edit-field">
                                <input id="ProductPrices_@p.Type.GetIntValue()-Rate" name="ProductPrices[@i].Rate" type="text" value="@( Math.Round( p.Rate ?? 0, 2 ).ToString().Replace(",", ".") )" placeholder="Enter price option Rate" />
                                <span class="field-validation-valid" data-valmsg-for="ProductPrices_@p.Type.GetIntValue()-Rate" data-valmsg-replace="true"></span>
                            </div>

                            <div class="edit-label">
                                <label for="ProductPrices_@p.Type.GetIntValue()-RateUnit">Rate Unit</label>
                            </div>
                            <div class="edit-field">
                                <input id="ProductPrices_@p.Type.GetIntValue()-RateUnit" name="ProductPrices[@i].RateUnit" type="text" value="@p.RateUnit" placeholder="Enter price option Rate Unit" />
                                <span class="field-validation-valid" data-valmsg-for="ProductPrices_@p.Type.GetIntValue()-RateUnit" data-valmsg-replace="true"></span>
                            </div>

                            <div class="edit-label">
                                <label for="ProductPrices_@p.Type.GetIntValue()-StartDate">Start Date</label>
                            </div>
                            <div class="edit-field">
                                <input id="ProductPrices_@p.Type.GetIntValue()-StartDate" name="ProductPrices[@i].StartDate" type="text" value="@( p.StartDate.HasValue ? p.StartDate.Value.ToString( "yyyy-MM-dd" ) : "" )" class="date-picker" placeholder="Enter price option Start Date" />
                                <span class="field-validation-valid" data-valmsg-for="ProductPrices_@p.Type.GetIntValue()-StartDate" data-valmsg-replace="true"></span>
                            </div>

                            <div class="edit-label">
                                <label for="ProductPrices_@p.Type.GetIntValue()-Status">Status</label>
                            </div>
                            <div class="edit-field">

                                <select id="ProductPrices_@p.Type.GetIntValue()-Status" name="ProductPrices[@i].Status" class="chzn" style="width: 98%;">

                                    @foreach (int t in Enum.GetValues(typeof(Status)))
                                    {
                                        Status status = (Status)t;

                                        if (status != Status.Active && status != Status.Inactive)
                                        {
                                            continue;
                                        }

                                        string sel = status == p.Status ? "selected=selected" : "";

                                        <option value="@t" @sel>@status.GetDisplayText()</option>
                                    }

                                </select>

                                <span class="field-validation-valid" data-valmsg-for="ProductPrices_@p.Type.GetIntValue()-Status" data-valmsg-replace="true"></span>
                            </div>

                        </li>

                        i++;
                    }
                </ul>
            }

        </div>

        <div class="clear" style="border-bottom: 1px dashed #ccc; margin-bottom: 20px;">&nbsp;</div>

        <p>
            <input id="save-btn" type="submit" value="Save" />
            <span style="padding: 0 5px;">/</span> <a data-cancel="1" data-target="#edit-item" data-remove="tr.edit">Cancel</a>
        </p>

    </div>

</div>
}